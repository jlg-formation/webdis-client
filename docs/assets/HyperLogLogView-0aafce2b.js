import{e as m,o as v,c as g,a as e,m as L,_ as b,r as l,q as _,s as D,v as T,j as x,t as h,p as I,k as N,b as P,w as r}from"./index-36a51f52.js";const B={class:"progression-bar"},U=m({__name:"ProgressionBar",props:{ratio:{}},setup(n){return(i,u)=>(v(),g("div",B,[e("div",{class:"ratio",style:L({width:i.ratio*100+"%"})},null,4)]))}});const R=b(U,[["__scopeId","data-v-786767bc"]]),o=n=>(I("data-v-1b9b6739"),n=n(),N(),n),V=o(()=>e("h1",null,"HyperLogLog",-1)),C={class:"content"},E={class:"add"},F=["onSubmit"],H=o(()=>e("span",null,"Nbr of random elements to add in the set",-1)),k=["disabled"],A=["onSubmit"],j={class:"cardinality"},z=o(()=>e("span",null,"Cardinality: ",-1)),O=o(()=>e("button",null,"Refresh Cardinality",-1)),G=["onSubmit"],K={class:"strlen"},M=o(()=>e("span",null,"Length: ",-1)),Z=o(()=>e("button",null,"Refresh String Length",-1)),$=["onSubmit"],q=o(()=>e("button",null,"Reset",-1)),Y=[q],J=o(()=>e("div",{class:"description"},[e("h1",null,"How it works?"),e("p",null,"The hyperloglog structure in Redis is in fact a string of maximum 12304 bytes"),e("p",null," The hyperloglog represents a projection of a set where you can only add element, but not retrieve them. "),e("p",null," However, the hyperloglog allows to get the cardinality (ie. size) of the set with an small approximation (less than 1%). It is design to measure the size of very big set (>10^9 elements) "),e("p",null,[P(" The primitive commands are PFADD, PFCOUNT. You can see them in "),e("a",{href:"https://redis.io/commands/?group=hyperloglog",target:"_blank"},"the redis doc")])],-1)),Q=m({__name:"HyperLogLogView",setup(n){const i=l(0),u=l(0),c=l(1),p=l(!1),d=l(0),y=async()=>{try{p.value=!0,d.value=0;let s=[];for(let a=0;a<c.value;a++)s.push(crypto.randomUUID()),d.value=a/c.value,s.length>1e3&&(await r.send("PFADD members "+s.join(" ")),s=[]);await r.send("PFADD members "+s.join(" ")),s=[]}catch(t){console.log("err: ",t)}finally{p.value=!1,d.value=0}},f=async()=>{try{const t=await r.send("PFCOUNT members");i.value=t.PFCOUNT}catch(t){console.log("err: ",t)}},w=async()=>{try{await r.send("DEL members")}catch(t){console.log("err: ",t)}},S=async()=>{try{const t=await r.send("STRLEN members");u.value=t.STRLEN}catch(t){console.log("err: ",t)}};return(t,s)=>(v(),g("main",null,[V,e("div",C,[e("div",E,[e("form",{class:"add",onSubmit:_(y,["prevent"])},[e("label",null,[H,D(e("input",{type:"number","onUpdate:modelValue":s[0]||(s[0]=a=>c.value=a)},null,512),[[T,c.value]])]),e("button",{disabled:p.value},"Add",8,k)],40,F),x(R,{ratio:d.value},null,8,["ratio"])]),e("form",{class:"get",onSubmit:_(f,["prevent"])},[e("div",j,[z,e("span",null,h(i.value),1)]),O],40,A),e("form",{class:"strlen",onSubmit:_(S,["prevent"])},[e("div",K,[M,e("span",null,h(u.value),1)]),Z],40,G),e("form",{class:"remove",onSubmit:_(w,["prevent"])},Y,40,$)]),J]))}});const X=b(Q,[["__scopeId","data-v-1b9b6739"]]);export{X as default};
